User defined functions (UDFs) extend the capabilities of Hive and Pig

Simpler than writing custom mapreduce components

Can be implemented using many languages, for example Java C# and python

Python is (relatively) simple scripting language - ideal for UDFs
 - intutive sytanx
 - Dynamic typing
 - Interpreted execution

 Pig natively supports Jython
 - Define the output schema as Pig bag
 - Declare a Python function that receive an input parameter from Pig
 - Return results as fields based on the output schema

 @outputSchema("result: {(a: chararray, b:int)}")
 Def myfunction(i):
 	...
 	return a, b

 Use the Pig FOREACH .... GENERATE statement to invoke UDF

 Register 'wasb:///scripts/myscript.py' using jython as myscript;

 src = LOAD '/data/source' AS (row:chararray);

 res = FOREACH src GENERATE myscript.myfunction(row);

 Python UDFs and Hive
 Hive exchanges data with python using streaming technique
 - Rows from Hive are passed to python throw STDOUT
 line = sys.stdin.readline()
 ...
 print processed_row

 Use the Hive TRANSFORM statement to invoke UDF
 add file wsfb:///scripts/myscript.py
 SELECT TRANSFORM (col1, col2, col3)
 	USING 'python myscript.py'
 	AS (col1 String, col2 int, col3 String)
 FROM mytale
 ORDER BY col1;